
# 显示shardingsphere sql
spring.shardingsphere.props.sql.show = true

#datasource config

spring.shardingsphere.datasource.names=ds0,ds1
# 数据源ds0
spring.shardingsphere.datasource.ds0.type = com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name = com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://123.57.93.225:3306/practice01
spring.shardingsphere.datasource.ds0.username = test
spring.shardingsphere.datasource.ds0.password = testUser%123456

# 数据源ds1
spring.shardingsphere.datasource.ds1.type = com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name = com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://123.57.93.225:3306/practice02
spring.shardingsphere.datasource.ds1.username = test
spring.shardingsphere.datasource.ds1.password = testUser%123456


# shardingsphere break
# 分片键
spring.shardingsphere.sharding.tables.t_user.database-strategy.inline.sharding-column=id
# 定位数据源
spring.shardingsphere.sharding.tables.t_user.database-strategy.inline.algorithm-expression=ds${id % 2}


# 分片键
spring.shardingsphere.sharding.tables.t_user_detail.database-strategy.inline.sharding-column=pid
# 定位数据源
spring.shardingsphere.sharding.tables.t_user_detail.database-strategy.inline.algorithm-expression=ds${pid % 2}



# id
spring.shardingsphere.sharding.tables.t_user.key-generator.column=id
##主键生成策略 使用雪花算法要注意数据库id长度是否足够
spring.shardingsphere.sharding.tables.t_user.key-generator.type=SNOWFLAKE


spring.shardingsphere.sharding.tables.t_user_detail.key-generator.column=id
##主键生成策略 使用雪花算法要注意数据库id长度是否足够
spring.shardingsphere.sharding.tables.t_user_detail.key-generator.type=SNOWFLAKE


# 广播表配置
spring.shardingsphere.sharding.broadcast-tables=t_city
spring.shardingsphere.sharding.tables.t_city.key-generator.column=id
##主键生成策略 使用雪花算法要注意数据库id长度是否足够
spring.shardingsphere.sharding.tables.t_city.key-generator.type=SNOWFLAKE
